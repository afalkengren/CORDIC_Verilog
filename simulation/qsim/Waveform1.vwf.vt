// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/11/2016 12:08:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CORDIC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CORDIC_vlg_sample_tst(
	clk,
	theta,
	sampler_tx
);
input  clk;
input [31:0] theta;
output sampler_tx;

reg sample;
time current_time;
always @(clk or theta)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CORDIC_vlg_check_tst (
	result,
	testp0,
	testp1,
	testp2,
	testp3,
	testp4,
	sampler_rx
);
input [31:0] result;
input [31:0] testp0;
input [31:0] testp1;
input [31:0] testp2;
input [31:0] testp3;
input [31:0] testp4;
input sampler_rx;

reg [31:0] result_expected;
reg [31:0] testp0_expected;
reg [31:0] testp1_expected;
reg [31:0] testp2_expected;
reg [31:0] testp3_expected;
reg [31:0] testp4_expected;

reg [31:0] result_prev;
reg [31:0] testp0_prev;
reg [31:0] testp1_prev;
reg [31:0] testp2_prev;
reg [31:0] testp3_prev;
reg [31:0] testp4_prev;

reg [31:0] result_expected_prev;
reg [31:0] testp0_expected_prev;
reg [31:0] testp1_expected_prev;
reg [31:0] testp2_expected_prev;
reg [31:0] testp3_expected_prev;
reg [31:0] testp4_expected_prev;

reg [31:0] last_result_exp;
reg [31:0] last_testp0_exp;
reg [31:0] last_testp1_exp;
reg [31:0] last_testp2_exp;
reg [31:0] last_testp3_exp;
reg [31:0] last_testp4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	result_prev = result;
	testp0_prev = testp0;
	testp1_prev = testp1;
	testp2_prev = testp2;
	testp3_prev = testp3;
	testp4_prev = testp4;
end

// update expected /o prevs

always @(trigger)
begin
	result_expected_prev = result_expected;
	testp0_expected_prev = testp0_expected;
	testp1_expected_prev = testp1_expected;
	testp2_expected_prev = testp2_expected;
	testp3_expected_prev = testp3_expected;
	testp4_expected_prev = testp4_expected;
end


// expected testp0[ 31 ]
initial
begin
	testp0_expected[31] = 1'bX;
end 
// expected testp0[ 30 ]
initial
begin
	testp0_expected[30] = 1'bX;
end 
// expected testp0[ 29 ]
initial
begin
	testp0_expected[29] = 1'bX;
end 
// expected testp0[ 28 ]
initial
begin
	testp0_expected[28] = 1'bX;
end 
// expected testp0[ 27 ]
initial
begin
	testp0_expected[27] = 1'bX;
end 
// expected testp0[ 26 ]
initial
begin
	testp0_expected[26] = 1'bX;
end 
// expected testp0[ 25 ]
initial
begin
	testp0_expected[25] = 1'bX;
end 
// expected testp0[ 24 ]
initial
begin
	testp0_expected[24] = 1'bX;
end 
// expected testp0[ 23 ]
initial
begin
	testp0_expected[23] = 1'bX;
end 
// expected testp0[ 22 ]
initial
begin
	testp0_expected[22] = 1'bX;
end 
// expected testp0[ 21 ]
initial
begin
	testp0_expected[21] = 1'bX;
end 
// expected testp0[ 20 ]
initial
begin
	testp0_expected[20] = 1'bX;
end 
// expected testp0[ 19 ]
initial
begin
	testp0_expected[19] = 1'bX;
end 
// expected testp0[ 18 ]
initial
begin
	testp0_expected[18] = 1'bX;
end 
// expected testp0[ 17 ]
initial
begin
	testp0_expected[17] = 1'bX;
end 
// expected testp0[ 16 ]
initial
begin
	testp0_expected[16] = 1'bX;
end 
// expected testp0[ 15 ]
initial
begin
	testp0_expected[15] = 1'bX;
end 
// expected testp0[ 14 ]
initial
begin
	testp0_expected[14] = 1'bX;
end 
// expected testp0[ 13 ]
initial
begin
	testp0_expected[13] = 1'bX;
end 
// expected testp0[ 12 ]
initial
begin
	testp0_expected[12] = 1'bX;
end 
// expected testp0[ 11 ]
initial
begin
	testp0_expected[11] = 1'bX;
end 
// expected testp0[ 10 ]
initial
begin
	testp0_expected[10] = 1'bX;
end 
// expected testp0[ 9 ]
initial
begin
	testp0_expected[9] = 1'bX;
end 
// expected testp0[ 8 ]
initial
begin
	testp0_expected[8] = 1'bX;
end 
// expected testp0[ 7 ]
initial
begin
	testp0_expected[7] = 1'bX;
end 
// expected testp0[ 6 ]
initial
begin
	testp0_expected[6] = 1'bX;
end 
// expected testp0[ 5 ]
initial
begin
	testp0_expected[5] = 1'bX;
end 
// expected testp0[ 4 ]
initial
begin
	testp0_expected[4] = 1'bX;
end 
// expected testp0[ 3 ]
initial
begin
	testp0_expected[3] = 1'bX;
end 
// expected testp0[ 2 ]
initial
begin
	testp0_expected[2] = 1'bX;
end 
// expected testp0[ 1 ]
initial
begin
	testp0_expected[1] = 1'bX;
end 
// expected testp0[ 0 ]
initial
begin
	testp0_expected[0] = 1'bX;
end 
// expected testp1[ 31 ]
initial
begin
	testp1_expected[31] = 1'bX;
end 
// expected testp1[ 30 ]
initial
begin
	testp1_expected[30] = 1'bX;
end 
// expected testp1[ 29 ]
initial
begin
	testp1_expected[29] = 1'bX;
end 
// expected testp1[ 28 ]
initial
begin
	testp1_expected[28] = 1'bX;
end 
// expected testp1[ 27 ]
initial
begin
	testp1_expected[27] = 1'bX;
end 
// expected testp1[ 26 ]
initial
begin
	testp1_expected[26] = 1'bX;
end 
// expected testp1[ 25 ]
initial
begin
	testp1_expected[25] = 1'bX;
end 
// expected testp1[ 24 ]
initial
begin
	testp1_expected[24] = 1'bX;
end 
// expected testp1[ 23 ]
initial
begin
	testp1_expected[23] = 1'bX;
end 
// expected testp1[ 22 ]
initial
begin
	testp1_expected[22] = 1'bX;
end 
// expected testp1[ 21 ]
initial
begin
	testp1_expected[21] = 1'bX;
end 
// expected testp1[ 20 ]
initial
begin
	testp1_expected[20] = 1'bX;
end 
// expected testp1[ 19 ]
initial
begin
	testp1_expected[19] = 1'bX;
end 
// expected testp1[ 18 ]
initial
begin
	testp1_expected[18] = 1'bX;
end 
// expected testp1[ 17 ]
initial
begin
	testp1_expected[17] = 1'bX;
end 
// expected testp1[ 16 ]
initial
begin
	testp1_expected[16] = 1'bX;
end 
// expected testp1[ 15 ]
initial
begin
	testp1_expected[15] = 1'bX;
end 
// expected testp1[ 14 ]
initial
begin
	testp1_expected[14] = 1'bX;
end 
// expected testp1[ 13 ]
initial
begin
	testp1_expected[13] = 1'bX;
end 
// expected testp1[ 12 ]
initial
begin
	testp1_expected[12] = 1'bX;
end 
// expected testp1[ 11 ]
initial
begin
	testp1_expected[11] = 1'bX;
end 
// expected testp1[ 10 ]
initial
begin
	testp1_expected[10] = 1'bX;
end 
// expected testp1[ 9 ]
initial
begin
	testp1_expected[9] = 1'bX;
end 
// expected testp1[ 8 ]
initial
begin
	testp1_expected[8] = 1'bX;
end 
// expected testp1[ 7 ]
initial
begin
	testp1_expected[7] = 1'bX;
end 
// expected testp1[ 6 ]
initial
begin
	testp1_expected[6] = 1'bX;
end 
// expected testp1[ 5 ]
initial
begin
	testp1_expected[5] = 1'bX;
end 
// expected testp1[ 4 ]
initial
begin
	testp1_expected[4] = 1'bX;
end 
// expected testp1[ 3 ]
initial
begin
	testp1_expected[3] = 1'bX;
end 
// expected testp1[ 2 ]
initial
begin
	testp1_expected[2] = 1'bX;
end 
// expected testp1[ 1 ]
initial
begin
	testp1_expected[1] = 1'bX;
end 
// expected testp1[ 0 ]
initial
begin
	testp1_expected[0] = 1'bX;
end 
// expected testp2[ 31 ]
initial
begin
	testp2_expected[31] = 1'bX;
end 
// expected testp2[ 30 ]
initial
begin
	testp2_expected[30] = 1'bX;
end 
// expected testp2[ 29 ]
initial
begin
	testp2_expected[29] = 1'bX;
end 
// expected testp2[ 28 ]
initial
begin
	testp2_expected[28] = 1'bX;
end 
// expected testp2[ 27 ]
initial
begin
	testp2_expected[27] = 1'bX;
end 
// expected testp2[ 26 ]
initial
begin
	testp2_expected[26] = 1'bX;
end 
// expected testp2[ 25 ]
initial
begin
	testp2_expected[25] = 1'bX;
end 
// expected testp2[ 24 ]
initial
begin
	testp2_expected[24] = 1'bX;
end 
// expected testp2[ 23 ]
initial
begin
	testp2_expected[23] = 1'bX;
end 
// expected testp2[ 22 ]
initial
begin
	testp2_expected[22] = 1'bX;
end 
// expected testp2[ 21 ]
initial
begin
	testp2_expected[21] = 1'bX;
end 
// expected testp2[ 20 ]
initial
begin
	testp2_expected[20] = 1'bX;
end 
// expected testp2[ 19 ]
initial
begin
	testp2_expected[19] = 1'bX;
end 
// expected testp2[ 18 ]
initial
begin
	testp2_expected[18] = 1'bX;
end 
// expected testp2[ 17 ]
initial
begin
	testp2_expected[17] = 1'bX;
end 
// expected testp2[ 16 ]
initial
begin
	testp2_expected[16] = 1'bX;
end 
// expected testp2[ 15 ]
initial
begin
	testp2_expected[15] = 1'bX;
end 
// expected testp2[ 14 ]
initial
begin
	testp2_expected[14] = 1'bX;
end 
// expected testp2[ 13 ]
initial
begin
	testp2_expected[13] = 1'bX;
end 
// expected testp2[ 12 ]
initial
begin
	testp2_expected[12] = 1'bX;
end 
// expected testp2[ 11 ]
initial
begin
	testp2_expected[11] = 1'bX;
end 
// expected testp2[ 10 ]
initial
begin
	testp2_expected[10] = 1'bX;
end 
// expected testp2[ 9 ]
initial
begin
	testp2_expected[9] = 1'bX;
end 
// expected testp2[ 8 ]
initial
begin
	testp2_expected[8] = 1'bX;
end 
// expected testp2[ 7 ]
initial
begin
	testp2_expected[7] = 1'bX;
end 
// expected testp2[ 6 ]
initial
begin
	testp2_expected[6] = 1'bX;
end 
// expected testp2[ 5 ]
initial
begin
	testp2_expected[5] = 1'bX;
end 
// expected testp2[ 4 ]
initial
begin
	testp2_expected[4] = 1'bX;
end 
// expected testp2[ 3 ]
initial
begin
	testp2_expected[3] = 1'bX;
end 
// expected testp2[ 2 ]
initial
begin
	testp2_expected[2] = 1'bX;
end 
// expected testp2[ 1 ]
initial
begin
	testp2_expected[1] = 1'bX;
end 
// expected testp2[ 0 ]
initial
begin
	testp2_expected[0] = 1'bX;
end 
// expected testp3[ 31 ]
initial
begin
	testp3_expected[31] = 1'bX;
end 
// expected testp3[ 30 ]
initial
begin
	testp3_expected[30] = 1'bX;
end 
// expected testp3[ 29 ]
initial
begin
	testp3_expected[29] = 1'bX;
end 
// expected testp3[ 28 ]
initial
begin
	testp3_expected[28] = 1'bX;
end 
// expected testp3[ 27 ]
initial
begin
	testp3_expected[27] = 1'bX;
end 
// expected testp3[ 26 ]
initial
begin
	testp3_expected[26] = 1'bX;
end 
// expected testp3[ 25 ]
initial
begin
	testp3_expected[25] = 1'bX;
end 
// expected testp3[ 24 ]
initial
begin
	testp3_expected[24] = 1'bX;
end 
// expected testp3[ 23 ]
initial
begin
	testp3_expected[23] = 1'bX;
end 
// expected testp3[ 22 ]
initial
begin
	testp3_expected[22] = 1'bX;
end 
// expected testp3[ 21 ]
initial
begin
	testp3_expected[21] = 1'bX;
end 
// expected testp3[ 20 ]
initial
begin
	testp3_expected[20] = 1'bX;
end 
// expected testp3[ 19 ]
initial
begin
	testp3_expected[19] = 1'bX;
end 
// expected testp3[ 18 ]
initial
begin
	testp3_expected[18] = 1'bX;
end 
// expected testp3[ 17 ]
initial
begin
	testp3_expected[17] = 1'bX;
end 
// expected testp3[ 16 ]
initial
begin
	testp3_expected[16] = 1'bX;
end 
// expected testp3[ 15 ]
initial
begin
	testp3_expected[15] = 1'bX;
end 
// expected testp3[ 14 ]
initial
begin
	testp3_expected[14] = 1'bX;
end 
// expected testp3[ 13 ]
initial
begin
	testp3_expected[13] = 1'bX;
end 
// expected testp3[ 12 ]
initial
begin
	testp3_expected[12] = 1'bX;
end 
// expected testp3[ 11 ]
initial
begin
	testp3_expected[11] = 1'bX;
end 
// expected testp3[ 10 ]
initial
begin
	testp3_expected[10] = 1'bX;
end 
// expected testp3[ 9 ]
initial
begin
	testp3_expected[9] = 1'bX;
end 
// expected testp3[ 8 ]
initial
begin
	testp3_expected[8] = 1'bX;
end 
// expected testp3[ 7 ]
initial
begin
	testp3_expected[7] = 1'bX;
end 
// expected testp3[ 6 ]
initial
begin
	testp3_expected[6] = 1'bX;
end 
// expected testp3[ 5 ]
initial
begin
	testp3_expected[5] = 1'bX;
end 
// expected testp3[ 4 ]
initial
begin
	testp3_expected[4] = 1'bX;
end 
// expected testp3[ 3 ]
initial
begin
	testp3_expected[3] = 1'bX;
end 
// expected testp3[ 2 ]
initial
begin
	testp3_expected[2] = 1'bX;
end 
// expected testp3[ 1 ]
initial
begin
	testp3_expected[1] = 1'bX;
end 
// expected testp3[ 0 ]
initial
begin
	testp3_expected[0] = 1'bX;
end 
// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// expected testp4[ 31 ]
initial
begin
	testp4_expected[31] = 1'bX;
end 
// expected testp4[ 30 ]
initial
begin
	testp4_expected[30] = 1'bX;
end 
// expected testp4[ 29 ]
initial
begin
	testp4_expected[29] = 1'bX;
end 
// expected testp4[ 28 ]
initial
begin
	testp4_expected[28] = 1'bX;
end 
// expected testp4[ 27 ]
initial
begin
	testp4_expected[27] = 1'bX;
end 
// expected testp4[ 26 ]
initial
begin
	testp4_expected[26] = 1'bX;
end 
// expected testp4[ 25 ]
initial
begin
	testp4_expected[25] = 1'bX;
end 
// expected testp4[ 24 ]
initial
begin
	testp4_expected[24] = 1'bX;
end 
// expected testp4[ 23 ]
initial
begin
	testp4_expected[23] = 1'bX;
end 
// expected testp4[ 22 ]
initial
begin
	testp4_expected[22] = 1'bX;
end 
// expected testp4[ 21 ]
initial
begin
	testp4_expected[21] = 1'bX;
end 
// expected testp4[ 20 ]
initial
begin
	testp4_expected[20] = 1'bX;
end 
// expected testp4[ 19 ]
initial
begin
	testp4_expected[19] = 1'bX;
end 
// expected testp4[ 18 ]
initial
begin
	testp4_expected[18] = 1'bX;
end 
// expected testp4[ 17 ]
initial
begin
	testp4_expected[17] = 1'bX;
end 
// expected testp4[ 16 ]
initial
begin
	testp4_expected[16] = 1'bX;
end 
// expected testp4[ 15 ]
initial
begin
	testp4_expected[15] = 1'bX;
end 
// expected testp4[ 14 ]
initial
begin
	testp4_expected[14] = 1'bX;
end 
// expected testp4[ 13 ]
initial
begin
	testp4_expected[13] = 1'bX;
end 
// expected testp4[ 12 ]
initial
begin
	testp4_expected[12] = 1'bX;
end 
// expected testp4[ 11 ]
initial
begin
	testp4_expected[11] = 1'bX;
end 
// expected testp4[ 10 ]
initial
begin
	testp4_expected[10] = 1'bX;
end 
// expected testp4[ 9 ]
initial
begin
	testp4_expected[9] = 1'bX;
end 
// expected testp4[ 8 ]
initial
begin
	testp4_expected[8] = 1'bX;
end 
// expected testp4[ 7 ]
initial
begin
	testp4_expected[7] = 1'bX;
end 
// expected testp4[ 6 ]
initial
begin
	testp4_expected[6] = 1'bX;
end 
// expected testp4[ 5 ]
initial
begin
	testp4_expected[5] = 1'bX;
end 
// expected testp4[ 4 ]
initial
begin
	testp4_expected[4] = 1'bX;
end 
// expected testp4[ 3 ]
initial
begin
	testp4_expected[3] = 1'bX;
end 
// expected testp4[ 2 ]
initial
begin
	testp4_expected[2] = 1'bX;
end 
// expected testp4[ 1 ]
initial
begin
	testp4_expected[1] = 1'bX;
end 
// expected testp4[ 0 ]
initial
begin
	testp4_expected[0] = 1'bX;
end 
// generate trigger
always @(result_expected or result or testp0_expected or testp0 or testp1_expected or testp1 or testp2_expected or testp2 or testp3_expected or testp3 or testp4_expected or testp4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected result = %b | expected testp0 = %b | expected testp1 = %b | expected testp2 = %b | expected testp3 = %b | expected testp4 = %b | ",result_expected_prev,testp0_expected_prev,testp1_expected_prev,testp2_expected_prev,testp3_expected_prev,testp4_expected_prev);
	$display("| real result = %b | real testp0 = %b | real testp1 = %b | real testp2 = %b | real testp3 = %b | real testp4 = %b | ",result_prev,testp0_prev,testp1_prev,testp2_prev,testp3_prev,testp4_prev);
`endif
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end
	if (
		( testp0_expected_prev[0] !== 1'bx ) && ( testp0_prev[0] !== testp0_expected_prev[0] )
		&& ((testp0_expected_prev[0] !== last_testp0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[0] = testp0_expected_prev[0];
	end
	if (
		( testp0_expected_prev[1] !== 1'bx ) && ( testp0_prev[1] !== testp0_expected_prev[1] )
		&& ((testp0_expected_prev[1] !== last_testp0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[1] = testp0_expected_prev[1];
	end
	if (
		( testp0_expected_prev[2] !== 1'bx ) && ( testp0_prev[2] !== testp0_expected_prev[2] )
		&& ((testp0_expected_prev[2] !== last_testp0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[2] = testp0_expected_prev[2];
	end
	if (
		( testp0_expected_prev[3] !== 1'bx ) && ( testp0_prev[3] !== testp0_expected_prev[3] )
		&& ((testp0_expected_prev[3] !== last_testp0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[3] = testp0_expected_prev[3];
	end
	if (
		( testp0_expected_prev[4] !== 1'bx ) && ( testp0_prev[4] !== testp0_expected_prev[4] )
		&& ((testp0_expected_prev[4] !== last_testp0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[4] = testp0_expected_prev[4];
	end
	if (
		( testp0_expected_prev[5] !== 1'bx ) && ( testp0_prev[5] !== testp0_expected_prev[5] )
		&& ((testp0_expected_prev[5] !== last_testp0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[5] = testp0_expected_prev[5];
	end
	if (
		( testp0_expected_prev[6] !== 1'bx ) && ( testp0_prev[6] !== testp0_expected_prev[6] )
		&& ((testp0_expected_prev[6] !== last_testp0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[6] = testp0_expected_prev[6];
	end
	if (
		( testp0_expected_prev[7] !== 1'bx ) && ( testp0_prev[7] !== testp0_expected_prev[7] )
		&& ((testp0_expected_prev[7] !== last_testp0_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[7] = testp0_expected_prev[7];
	end
	if (
		( testp0_expected_prev[8] !== 1'bx ) && ( testp0_prev[8] !== testp0_expected_prev[8] )
		&& ((testp0_expected_prev[8] !== last_testp0_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[8] = testp0_expected_prev[8];
	end
	if (
		( testp0_expected_prev[9] !== 1'bx ) && ( testp0_prev[9] !== testp0_expected_prev[9] )
		&& ((testp0_expected_prev[9] !== last_testp0_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[9] = testp0_expected_prev[9];
	end
	if (
		( testp0_expected_prev[10] !== 1'bx ) && ( testp0_prev[10] !== testp0_expected_prev[10] )
		&& ((testp0_expected_prev[10] !== last_testp0_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[10] = testp0_expected_prev[10];
	end
	if (
		( testp0_expected_prev[11] !== 1'bx ) && ( testp0_prev[11] !== testp0_expected_prev[11] )
		&& ((testp0_expected_prev[11] !== last_testp0_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[11] = testp0_expected_prev[11];
	end
	if (
		( testp0_expected_prev[12] !== 1'bx ) && ( testp0_prev[12] !== testp0_expected_prev[12] )
		&& ((testp0_expected_prev[12] !== last_testp0_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[12] = testp0_expected_prev[12];
	end
	if (
		( testp0_expected_prev[13] !== 1'bx ) && ( testp0_prev[13] !== testp0_expected_prev[13] )
		&& ((testp0_expected_prev[13] !== last_testp0_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[13] = testp0_expected_prev[13];
	end
	if (
		( testp0_expected_prev[14] !== 1'bx ) && ( testp0_prev[14] !== testp0_expected_prev[14] )
		&& ((testp0_expected_prev[14] !== last_testp0_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[14] = testp0_expected_prev[14];
	end
	if (
		( testp0_expected_prev[15] !== 1'bx ) && ( testp0_prev[15] !== testp0_expected_prev[15] )
		&& ((testp0_expected_prev[15] !== last_testp0_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[15] = testp0_expected_prev[15];
	end
	if (
		( testp0_expected_prev[16] !== 1'bx ) && ( testp0_prev[16] !== testp0_expected_prev[16] )
		&& ((testp0_expected_prev[16] !== last_testp0_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[16] = testp0_expected_prev[16];
	end
	if (
		( testp0_expected_prev[17] !== 1'bx ) && ( testp0_prev[17] !== testp0_expected_prev[17] )
		&& ((testp0_expected_prev[17] !== last_testp0_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[17] = testp0_expected_prev[17];
	end
	if (
		( testp0_expected_prev[18] !== 1'bx ) && ( testp0_prev[18] !== testp0_expected_prev[18] )
		&& ((testp0_expected_prev[18] !== last_testp0_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[18] = testp0_expected_prev[18];
	end
	if (
		( testp0_expected_prev[19] !== 1'bx ) && ( testp0_prev[19] !== testp0_expected_prev[19] )
		&& ((testp0_expected_prev[19] !== last_testp0_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[19] = testp0_expected_prev[19];
	end
	if (
		( testp0_expected_prev[20] !== 1'bx ) && ( testp0_prev[20] !== testp0_expected_prev[20] )
		&& ((testp0_expected_prev[20] !== last_testp0_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[20] = testp0_expected_prev[20];
	end
	if (
		( testp0_expected_prev[21] !== 1'bx ) && ( testp0_prev[21] !== testp0_expected_prev[21] )
		&& ((testp0_expected_prev[21] !== last_testp0_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[21] = testp0_expected_prev[21];
	end
	if (
		( testp0_expected_prev[22] !== 1'bx ) && ( testp0_prev[22] !== testp0_expected_prev[22] )
		&& ((testp0_expected_prev[22] !== last_testp0_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[22] = testp0_expected_prev[22];
	end
	if (
		( testp0_expected_prev[23] !== 1'bx ) && ( testp0_prev[23] !== testp0_expected_prev[23] )
		&& ((testp0_expected_prev[23] !== last_testp0_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[23] = testp0_expected_prev[23];
	end
	if (
		( testp0_expected_prev[24] !== 1'bx ) && ( testp0_prev[24] !== testp0_expected_prev[24] )
		&& ((testp0_expected_prev[24] !== last_testp0_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[24] = testp0_expected_prev[24];
	end
	if (
		( testp0_expected_prev[25] !== 1'bx ) && ( testp0_prev[25] !== testp0_expected_prev[25] )
		&& ((testp0_expected_prev[25] !== last_testp0_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[25] = testp0_expected_prev[25];
	end
	if (
		( testp0_expected_prev[26] !== 1'bx ) && ( testp0_prev[26] !== testp0_expected_prev[26] )
		&& ((testp0_expected_prev[26] !== last_testp0_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[26] = testp0_expected_prev[26];
	end
	if (
		( testp0_expected_prev[27] !== 1'bx ) && ( testp0_prev[27] !== testp0_expected_prev[27] )
		&& ((testp0_expected_prev[27] !== last_testp0_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[27] = testp0_expected_prev[27];
	end
	if (
		( testp0_expected_prev[28] !== 1'bx ) && ( testp0_prev[28] !== testp0_expected_prev[28] )
		&& ((testp0_expected_prev[28] !== last_testp0_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[28] = testp0_expected_prev[28];
	end
	if (
		( testp0_expected_prev[29] !== 1'bx ) && ( testp0_prev[29] !== testp0_expected_prev[29] )
		&& ((testp0_expected_prev[29] !== last_testp0_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[29] = testp0_expected_prev[29];
	end
	if (
		( testp0_expected_prev[30] !== 1'bx ) && ( testp0_prev[30] !== testp0_expected_prev[30] )
		&& ((testp0_expected_prev[30] !== last_testp0_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[30] = testp0_expected_prev[30];
	end
	if (
		( testp0_expected_prev[31] !== 1'bx ) && ( testp0_prev[31] !== testp0_expected_prev[31] )
		&& ((testp0_expected_prev[31] !== last_testp0_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp0_expected_prev);
		$display ("     Real value = %b", testp0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_testp0_exp[31] = testp0_expected_prev[31];
	end
	if (
		( testp1_expected_prev[0] !== 1'bx ) && ( testp1_prev[0] !== testp1_expected_prev[0] )
		&& ((testp1_expected_prev[0] !== last_testp1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[0] = testp1_expected_prev[0];
	end
	if (
		( testp1_expected_prev[1] !== 1'bx ) && ( testp1_prev[1] !== testp1_expected_prev[1] )
		&& ((testp1_expected_prev[1] !== last_testp1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[1] = testp1_expected_prev[1];
	end
	if (
		( testp1_expected_prev[2] !== 1'bx ) && ( testp1_prev[2] !== testp1_expected_prev[2] )
		&& ((testp1_expected_prev[2] !== last_testp1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[2] = testp1_expected_prev[2];
	end
	if (
		( testp1_expected_prev[3] !== 1'bx ) && ( testp1_prev[3] !== testp1_expected_prev[3] )
		&& ((testp1_expected_prev[3] !== last_testp1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[3] = testp1_expected_prev[3];
	end
	if (
		( testp1_expected_prev[4] !== 1'bx ) && ( testp1_prev[4] !== testp1_expected_prev[4] )
		&& ((testp1_expected_prev[4] !== last_testp1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[4] = testp1_expected_prev[4];
	end
	if (
		( testp1_expected_prev[5] !== 1'bx ) && ( testp1_prev[5] !== testp1_expected_prev[5] )
		&& ((testp1_expected_prev[5] !== last_testp1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[5] = testp1_expected_prev[5];
	end
	if (
		( testp1_expected_prev[6] !== 1'bx ) && ( testp1_prev[6] !== testp1_expected_prev[6] )
		&& ((testp1_expected_prev[6] !== last_testp1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[6] = testp1_expected_prev[6];
	end
	if (
		( testp1_expected_prev[7] !== 1'bx ) && ( testp1_prev[7] !== testp1_expected_prev[7] )
		&& ((testp1_expected_prev[7] !== last_testp1_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[7] = testp1_expected_prev[7];
	end
	if (
		( testp1_expected_prev[8] !== 1'bx ) && ( testp1_prev[8] !== testp1_expected_prev[8] )
		&& ((testp1_expected_prev[8] !== last_testp1_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[8] = testp1_expected_prev[8];
	end
	if (
		( testp1_expected_prev[9] !== 1'bx ) && ( testp1_prev[9] !== testp1_expected_prev[9] )
		&& ((testp1_expected_prev[9] !== last_testp1_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[9] = testp1_expected_prev[9];
	end
	if (
		( testp1_expected_prev[10] !== 1'bx ) && ( testp1_prev[10] !== testp1_expected_prev[10] )
		&& ((testp1_expected_prev[10] !== last_testp1_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[10] = testp1_expected_prev[10];
	end
	if (
		( testp1_expected_prev[11] !== 1'bx ) && ( testp1_prev[11] !== testp1_expected_prev[11] )
		&& ((testp1_expected_prev[11] !== last_testp1_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[11] = testp1_expected_prev[11];
	end
	if (
		( testp1_expected_prev[12] !== 1'bx ) && ( testp1_prev[12] !== testp1_expected_prev[12] )
		&& ((testp1_expected_prev[12] !== last_testp1_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[12] = testp1_expected_prev[12];
	end
	if (
		( testp1_expected_prev[13] !== 1'bx ) && ( testp1_prev[13] !== testp1_expected_prev[13] )
		&& ((testp1_expected_prev[13] !== last_testp1_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[13] = testp1_expected_prev[13];
	end
	if (
		( testp1_expected_prev[14] !== 1'bx ) && ( testp1_prev[14] !== testp1_expected_prev[14] )
		&& ((testp1_expected_prev[14] !== last_testp1_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[14] = testp1_expected_prev[14];
	end
	if (
		( testp1_expected_prev[15] !== 1'bx ) && ( testp1_prev[15] !== testp1_expected_prev[15] )
		&& ((testp1_expected_prev[15] !== last_testp1_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[15] = testp1_expected_prev[15];
	end
	if (
		( testp1_expected_prev[16] !== 1'bx ) && ( testp1_prev[16] !== testp1_expected_prev[16] )
		&& ((testp1_expected_prev[16] !== last_testp1_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[16] = testp1_expected_prev[16];
	end
	if (
		( testp1_expected_prev[17] !== 1'bx ) && ( testp1_prev[17] !== testp1_expected_prev[17] )
		&& ((testp1_expected_prev[17] !== last_testp1_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[17] = testp1_expected_prev[17];
	end
	if (
		( testp1_expected_prev[18] !== 1'bx ) && ( testp1_prev[18] !== testp1_expected_prev[18] )
		&& ((testp1_expected_prev[18] !== last_testp1_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[18] = testp1_expected_prev[18];
	end
	if (
		( testp1_expected_prev[19] !== 1'bx ) && ( testp1_prev[19] !== testp1_expected_prev[19] )
		&& ((testp1_expected_prev[19] !== last_testp1_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[19] = testp1_expected_prev[19];
	end
	if (
		( testp1_expected_prev[20] !== 1'bx ) && ( testp1_prev[20] !== testp1_expected_prev[20] )
		&& ((testp1_expected_prev[20] !== last_testp1_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[20] = testp1_expected_prev[20];
	end
	if (
		( testp1_expected_prev[21] !== 1'bx ) && ( testp1_prev[21] !== testp1_expected_prev[21] )
		&& ((testp1_expected_prev[21] !== last_testp1_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[21] = testp1_expected_prev[21];
	end
	if (
		( testp1_expected_prev[22] !== 1'bx ) && ( testp1_prev[22] !== testp1_expected_prev[22] )
		&& ((testp1_expected_prev[22] !== last_testp1_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[22] = testp1_expected_prev[22];
	end
	if (
		( testp1_expected_prev[23] !== 1'bx ) && ( testp1_prev[23] !== testp1_expected_prev[23] )
		&& ((testp1_expected_prev[23] !== last_testp1_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[23] = testp1_expected_prev[23];
	end
	if (
		( testp1_expected_prev[24] !== 1'bx ) && ( testp1_prev[24] !== testp1_expected_prev[24] )
		&& ((testp1_expected_prev[24] !== last_testp1_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[24] = testp1_expected_prev[24];
	end
	if (
		( testp1_expected_prev[25] !== 1'bx ) && ( testp1_prev[25] !== testp1_expected_prev[25] )
		&& ((testp1_expected_prev[25] !== last_testp1_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[25] = testp1_expected_prev[25];
	end
	if (
		( testp1_expected_prev[26] !== 1'bx ) && ( testp1_prev[26] !== testp1_expected_prev[26] )
		&& ((testp1_expected_prev[26] !== last_testp1_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[26] = testp1_expected_prev[26];
	end
	if (
		( testp1_expected_prev[27] !== 1'bx ) && ( testp1_prev[27] !== testp1_expected_prev[27] )
		&& ((testp1_expected_prev[27] !== last_testp1_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[27] = testp1_expected_prev[27];
	end
	if (
		( testp1_expected_prev[28] !== 1'bx ) && ( testp1_prev[28] !== testp1_expected_prev[28] )
		&& ((testp1_expected_prev[28] !== last_testp1_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[28] = testp1_expected_prev[28];
	end
	if (
		( testp1_expected_prev[29] !== 1'bx ) && ( testp1_prev[29] !== testp1_expected_prev[29] )
		&& ((testp1_expected_prev[29] !== last_testp1_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[29] = testp1_expected_prev[29];
	end
	if (
		( testp1_expected_prev[30] !== 1'bx ) && ( testp1_prev[30] !== testp1_expected_prev[30] )
		&& ((testp1_expected_prev[30] !== last_testp1_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[30] = testp1_expected_prev[30];
	end
	if (
		( testp1_expected_prev[31] !== 1'bx ) && ( testp1_prev[31] !== testp1_expected_prev[31] )
		&& ((testp1_expected_prev[31] !== last_testp1_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp1_expected_prev);
		$display ("     Real value = %b", testp1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_testp1_exp[31] = testp1_expected_prev[31];
	end
	if (
		( testp2_expected_prev[0] !== 1'bx ) && ( testp2_prev[0] !== testp2_expected_prev[0] )
		&& ((testp2_expected_prev[0] !== last_testp2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[0] = testp2_expected_prev[0];
	end
	if (
		( testp2_expected_prev[1] !== 1'bx ) && ( testp2_prev[1] !== testp2_expected_prev[1] )
		&& ((testp2_expected_prev[1] !== last_testp2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[1] = testp2_expected_prev[1];
	end
	if (
		( testp2_expected_prev[2] !== 1'bx ) && ( testp2_prev[2] !== testp2_expected_prev[2] )
		&& ((testp2_expected_prev[2] !== last_testp2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[2] = testp2_expected_prev[2];
	end
	if (
		( testp2_expected_prev[3] !== 1'bx ) && ( testp2_prev[3] !== testp2_expected_prev[3] )
		&& ((testp2_expected_prev[3] !== last_testp2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[3] = testp2_expected_prev[3];
	end
	if (
		( testp2_expected_prev[4] !== 1'bx ) && ( testp2_prev[4] !== testp2_expected_prev[4] )
		&& ((testp2_expected_prev[4] !== last_testp2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[4] = testp2_expected_prev[4];
	end
	if (
		( testp2_expected_prev[5] !== 1'bx ) && ( testp2_prev[5] !== testp2_expected_prev[5] )
		&& ((testp2_expected_prev[5] !== last_testp2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[5] = testp2_expected_prev[5];
	end
	if (
		( testp2_expected_prev[6] !== 1'bx ) && ( testp2_prev[6] !== testp2_expected_prev[6] )
		&& ((testp2_expected_prev[6] !== last_testp2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[6] = testp2_expected_prev[6];
	end
	if (
		( testp2_expected_prev[7] !== 1'bx ) && ( testp2_prev[7] !== testp2_expected_prev[7] )
		&& ((testp2_expected_prev[7] !== last_testp2_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[7] = testp2_expected_prev[7];
	end
	if (
		( testp2_expected_prev[8] !== 1'bx ) && ( testp2_prev[8] !== testp2_expected_prev[8] )
		&& ((testp2_expected_prev[8] !== last_testp2_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[8] = testp2_expected_prev[8];
	end
	if (
		( testp2_expected_prev[9] !== 1'bx ) && ( testp2_prev[9] !== testp2_expected_prev[9] )
		&& ((testp2_expected_prev[9] !== last_testp2_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[9] = testp2_expected_prev[9];
	end
	if (
		( testp2_expected_prev[10] !== 1'bx ) && ( testp2_prev[10] !== testp2_expected_prev[10] )
		&& ((testp2_expected_prev[10] !== last_testp2_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[10] = testp2_expected_prev[10];
	end
	if (
		( testp2_expected_prev[11] !== 1'bx ) && ( testp2_prev[11] !== testp2_expected_prev[11] )
		&& ((testp2_expected_prev[11] !== last_testp2_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[11] = testp2_expected_prev[11];
	end
	if (
		( testp2_expected_prev[12] !== 1'bx ) && ( testp2_prev[12] !== testp2_expected_prev[12] )
		&& ((testp2_expected_prev[12] !== last_testp2_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[12] = testp2_expected_prev[12];
	end
	if (
		( testp2_expected_prev[13] !== 1'bx ) && ( testp2_prev[13] !== testp2_expected_prev[13] )
		&& ((testp2_expected_prev[13] !== last_testp2_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[13] = testp2_expected_prev[13];
	end
	if (
		( testp2_expected_prev[14] !== 1'bx ) && ( testp2_prev[14] !== testp2_expected_prev[14] )
		&& ((testp2_expected_prev[14] !== last_testp2_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[14] = testp2_expected_prev[14];
	end
	if (
		( testp2_expected_prev[15] !== 1'bx ) && ( testp2_prev[15] !== testp2_expected_prev[15] )
		&& ((testp2_expected_prev[15] !== last_testp2_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[15] = testp2_expected_prev[15];
	end
	if (
		( testp2_expected_prev[16] !== 1'bx ) && ( testp2_prev[16] !== testp2_expected_prev[16] )
		&& ((testp2_expected_prev[16] !== last_testp2_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[16] = testp2_expected_prev[16];
	end
	if (
		( testp2_expected_prev[17] !== 1'bx ) && ( testp2_prev[17] !== testp2_expected_prev[17] )
		&& ((testp2_expected_prev[17] !== last_testp2_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[17] = testp2_expected_prev[17];
	end
	if (
		( testp2_expected_prev[18] !== 1'bx ) && ( testp2_prev[18] !== testp2_expected_prev[18] )
		&& ((testp2_expected_prev[18] !== last_testp2_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[18] = testp2_expected_prev[18];
	end
	if (
		( testp2_expected_prev[19] !== 1'bx ) && ( testp2_prev[19] !== testp2_expected_prev[19] )
		&& ((testp2_expected_prev[19] !== last_testp2_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[19] = testp2_expected_prev[19];
	end
	if (
		( testp2_expected_prev[20] !== 1'bx ) && ( testp2_prev[20] !== testp2_expected_prev[20] )
		&& ((testp2_expected_prev[20] !== last_testp2_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[20] = testp2_expected_prev[20];
	end
	if (
		( testp2_expected_prev[21] !== 1'bx ) && ( testp2_prev[21] !== testp2_expected_prev[21] )
		&& ((testp2_expected_prev[21] !== last_testp2_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[21] = testp2_expected_prev[21];
	end
	if (
		( testp2_expected_prev[22] !== 1'bx ) && ( testp2_prev[22] !== testp2_expected_prev[22] )
		&& ((testp2_expected_prev[22] !== last_testp2_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[22] = testp2_expected_prev[22];
	end
	if (
		( testp2_expected_prev[23] !== 1'bx ) && ( testp2_prev[23] !== testp2_expected_prev[23] )
		&& ((testp2_expected_prev[23] !== last_testp2_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[23] = testp2_expected_prev[23];
	end
	if (
		( testp2_expected_prev[24] !== 1'bx ) && ( testp2_prev[24] !== testp2_expected_prev[24] )
		&& ((testp2_expected_prev[24] !== last_testp2_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[24] = testp2_expected_prev[24];
	end
	if (
		( testp2_expected_prev[25] !== 1'bx ) && ( testp2_prev[25] !== testp2_expected_prev[25] )
		&& ((testp2_expected_prev[25] !== last_testp2_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[25] = testp2_expected_prev[25];
	end
	if (
		( testp2_expected_prev[26] !== 1'bx ) && ( testp2_prev[26] !== testp2_expected_prev[26] )
		&& ((testp2_expected_prev[26] !== last_testp2_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[26] = testp2_expected_prev[26];
	end
	if (
		( testp2_expected_prev[27] !== 1'bx ) && ( testp2_prev[27] !== testp2_expected_prev[27] )
		&& ((testp2_expected_prev[27] !== last_testp2_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[27] = testp2_expected_prev[27];
	end
	if (
		( testp2_expected_prev[28] !== 1'bx ) && ( testp2_prev[28] !== testp2_expected_prev[28] )
		&& ((testp2_expected_prev[28] !== last_testp2_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[28] = testp2_expected_prev[28];
	end
	if (
		( testp2_expected_prev[29] !== 1'bx ) && ( testp2_prev[29] !== testp2_expected_prev[29] )
		&& ((testp2_expected_prev[29] !== last_testp2_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[29] = testp2_expected_prev[29];
	end
	if (
		( testp2_expected_prev[30] !== 1'bx ) && ( testp2_prev[30] !== testp2_expected_prev[30] )
		&& ((testp2_expected_prev[30] !== last_testp2_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[30] = testp2_expected_prev[30];
	end
	if (
		( testp2_expected_prev[31] !== 1'bx ) && ( testp2_prev[31] !== testp2_expected_prev[31] )
		&& ((testp2_expected_prev[31] !== last_testp2_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp2_expected_prev);
		$display ("     Real value = %b", testp2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_testp2_exp[31] = testp2_expected_prev[31];
	end
	if (
		( testp3_expected_prev[0] !== 1'bx ) && ( testp3_prev[0] !== testp3_expected_prev[0] )
		&& ((testp3_expected_prev[0] !== last_testp3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[0] = testp3_expected_prev[0];
	end
	if (
		( testp3_expected_prev[1] !== 1'bx ) && ( testp3_prev[1] !== testp3_expected_prev[1] )
		&& ((testp3_expected_prev[1] !== last_testp3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[1] = testp3_expected_prev[1];
	end
	if (
		( testp3_expected_prev[2] !== 1'bx ) && ( testp3_prev[2] !== testp3_expected_prev[2] )
		&& ((testp3_expected_prev[2] !== last_testp3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[2] = testp3_expected_prev[2];
	end
	if (
		( testp3_expected_prev[3] !== 1'bx ) && ( testp3_prev[3] !== testp3_expected_prev[3] )
		&& ((testp3_expected_prev[3] !== last_testp3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[3] = testp3_expected_prev[3];
	end
	if (
		( testp3_expected_prev[4] !== 1'bx ) && ( testp3_prev[4] !== testp3_expected_prev[4] )
		&& ((testp3_expected_prev[4] !== last_testp3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[4] = testp3_expected_prev[4];
	end
	if (
		( testp3_expected_prev[5] !== 1'bx ) && ( testp3_prev[5] !== testp3_expected_prev[5] )
		&& ((testp3_expected_prev[5] !== last_testp3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[5] = testp3_expected_prev[5];
	end
	if (
		( testp3_expected_prev[6] !== 1'bx ) && ( testp3_prev[6] !== testp3_expected_prev[6] )
		&& ((testp3_expected_prev[6] !== last_testp3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[6] = testp3_expected_prev[6];
	end
	if (
		( testp3_expected_prev[7] !== 1'bx ) && ( testp3_prev[7] !== testp3_expected_prev[7] )
		&& ((testp3_expected_prev[7] !== last_testp3_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[7] = testp3_expected_prev[7];
	end
	if (
		( testp3_expected_prev[8] !== 1'bx ) && ( testp3_prev[8] !== testp3_expected_prev[8] )
		&& ((testp3_expected_prev[8] !== last_testp3_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[8] = testp3_expected_prev[8];
	end
	if (
		( testp3_expected_prev[9] !== 1'bx ) && ( testp3_prev[9] !== testp3_expected_prev[9] )
		&& ((testp3_expected_prev[9] !== last_testp3_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[9] = testp3_expected_prev[9];
	end
	if (
		( testp3_expected_prev[10] !== 1'bx ) && ( testp3_prev[10] !== testp3_expected_prev[10] )
		&& ((testp3_expected_prev[10] !== last_testp3_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[10] = testp3_expected_prev[10];
	end
	if (
		( testp3_expected_prev[11] !== 1'bx ) && ( testp3_prev[11] !== testp3_expected_prev[11] )
		&& ((testp3_expected_prev[11] !== last_testp3_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[11] = testp3_expected_prev[11];
	end
	if (
		( testp3_expected_prev[12] !== 1'bx ) && ( testp3_prev[12] !== testp3_expected_prev[12] )
		&& ((testp3_expected_prev[12] !== last_testp3_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[12] = testp3_expected_prev[12];
	end
	if (
		( testp3_expected_prev[13] !== 1'bx ) && ( testp3_prev[13] !== testp3_expected_prev[13] )
		&& ((testp3_expected_prev[13] !== last_testp3_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[13] = testp3_expected_prev[13];
	end
	if (
		( testp3_expected_prev[14] !== 1'bx ) && ( testp3_prev[14] !== testp3_expected_prev[14] )
		&& ((testp3_expected_prev[14] !== last_testp3_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[14] = testp3_expected_prev[14];
	end
	if (
		( testp3_expected_prev[15] !== 1'bx ) && ( testp3_prev[15] !== testp3_expected_prev[15] )
		&& ((testp3_expected_prev[15] !== last_testp3_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[15] = testp3_expected_prev[15];
	end
	if (
		( testp3_expected_prev[16] !== 1'bx ) && ( testp3_prev[16] !== testp3_expected_prev[16] )
		&& ((testp3_expected_prev[16] !== last_testp3_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[16] = testp3_expected_prev[16];
	end
	if (
		( testp3_expected_prev[17] !== 1'bx ) && ( testp3_prev[17] !== testp3_expected_prev[17] )
		&& ((testp3_expected_prev[17] !== last_testp3_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[17] = testp3_expected_prev[17];
	end
	if (
		( testp3_expected_prev[18] !== 1'bx ) && ( testp3_prev[18] !== testp3_expected_prev[18] )
		&& ((testp3_expected_prev[18] !== last_testp3_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[18] = testp3_expected_prev[18];
	end
	if (
		( testp3_expected_prev[19] !== 1'bx ) && ( testp3_prev[19] !== testp3_expected_prev[19] )
		&& ((testp3_expected_prev[19] !== last_testp3_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[19] = testp3_expected_prev[19];
	end
	if (
		( testp3_expected_prev[20] !== 1'bx ) && ( testp3_prev[20] !== testp3_expected_prev[20] )
		&& ((testp3_expected_prev[20] !== last_testp3_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[20] = testp3_expected_prev[20];
	end
	if (
		( testp3_expected_prev[21] !== 1'bx ) && ( testp3_prev[21] !== testp3_expected_prev[21] )
		&& ((testp3_expected_prev[21] !== last_testp3_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[21] = testp3_expected_prev[21];
	end
	if (
		( testp3_expected_prev[22] !== 1'bx ) && ( testp3_prev[22] !== testp3_expected_prev[22] )
		&& ((testp3_expected_prev[22] !== last_testp3_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[22] = testp3_expected_prev[22];
	end
	if (
		( testp3_expected_prev[23] !== 1'bx ) && ( testp3_prev[23] !== testp3_expected_prev[23] )
		&& ((testp3_expected_prev[23] !== last_testp3_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[23] = testp3_expected_prev[23];
	end
	if (
		( testp3_expected_prev[24] !== 1'bx ) && ( testp3_prev[24] !== testp3_expected_prev[24] )
		&& ((testp3_expected_prev[24] !== last_testp3_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[24] = testp3_expected_prev[24];
	end
	if (
		( testp3_expected_prev[25] !== 1'bx ) && ( testp3_prev[25] !== testp3_expected_prev[25] )
		&& ((testp3_expected_prev[25] !== last_testp3_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[25] = testp3_expected_prev[25];
	end
	if (
		( testp3_expected_prev[26] !== 1'bx ) && ( testp3_prev[26] !== testp3_expected_prev[26] )
		&& ((testp3_expected_prev[26] !== last_testp3_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[26] = testp3_expected_prev[26];
	end
	if (
		( testp3_expected_prev[27] !== 1'bx ) && ( testp3_prev[27] !== testp3_expected_prev[27] )
		&& ((testp3_expected_prev[27] !== last_testp3_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[27] = testp3_expected_prev[27];
	end
	if (
		( testp3_expected_prev[28] !== 1'bx ) && ( testp3_prev[28] !== testp3_expected_prev[28] )
		&& ((testp3_expected_prev[28] !== last_testp3_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[28] = testp3_expected_prev[28];
	end
	if (
		( testp3_expected_prev[29] !== 1'bx ) && ( testp3_prev[29] !== testp3_expected_prev[29] )
		&& ((testp3_expected_prev[29] !== last_testp3_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[29] = testp3_expected_prev[29];
	end
	if (
		( testp3_expected_prev[30] !== 1'bx ) && ( testp3_prev[30] !== testp3_expected_prev[30] )
		&& ((testp3_expected_prev[30] !== last_testp3_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[30] = testp3_expected_prev[30];
	end
	if (
		( testp3_expected_prev[31] !== 1'bx ) && ( testp3_prev[31] !== testp3_expected_prev[31] )
		&& ((testp3_expected_prev[31] !== last_testp3_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp3_expected_prev);
		$display ("     Real value = %b", testp3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_testp3_exp[31] = testp3_expected_prev[31];
	end
	if (
		( testp4_expected_prev[0] !== 1'bx ) && ( testp4_prev[0] !== testp4_expected_prev[0] )
		&& ((testp4_expected_prev[0] !== last_testp4_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[0] = testp4_expected_prev[0];
	end
	if (
		( testp4_expected_prev[1] !== 1'bx ) && ( testp4_prev[1] !== testp4_expected_prev[1] )
		&& ((testp4_expected_prev[1] !== last_testp4_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[1] = testp4_expected_prev[1];
	end
	if (
		( testp4_expected_prev[2] !== 1'bx ) && ( testp4_prev[2] !== testp4_expected_prev[2] )
		&& ((testp4_expected_prev[2] !== last_testp4_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[2] = testp4_expected_prev[2];
	end
	if (
		( testp4_expected_prev[3] !== 1'bx ) && ( testp4_prev[3] !== testp4_expected_prev[3] )
		&& ((testp4_expected_prev[3] !== last_testp4_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[3] = testp4_expected_prev[3];
	end
	if (
		( testp4_expected_prev[4] !== 1'bx ) && ( testp4_prev[4] !== testp4_expected_prev[4] )
		&& ((testp4_expected_prev[4] !== last_testp4_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[4] = testp4_expected_prev[4];
	end
	if (
		( testp4_expected_prev[5] !== 1'bx ) && ( testp4_prev[5] !== testp4_expected_prev[5] )
		&& ((testp4_expected_prev[5] !== last_testp4_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[5] = testp4_expected_prev[5];
	end
	if (
		( testp4_expected_prev[6] !== 1'bx ) && ( testp4_prev[6] !== testp4_expected_prev[6] )
		&& ((testp4_expected_prev[6] !== last_testp4_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[6] = testp4_expected_prev[6];
	end
	if (
		( testp4_expected_prev[7] !== 1'bx ) && ( testp4_prev[7] !== testp4_expected_prev[7] )
		&& ((testp4_expected_prev[7] !== last_testp4_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[7] = testp4_expected_prev[7];
	end
	if (
		( testp4_expected_prev[8] !== 1'bx ) && ( testp4_prev[8] !== testp4_expected_prev[8] )
		&& ((testp4_expected_prev[8] !== last_testp4_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[8] = testp4_expected_prev[8];
	end
	if (
		( testp4_expected_prev[9] !== 1'bx ) && ( testp4_prev[9] !== testp4_expected_prev[9] )
		&& ((testp4_expected_prev[9] !== last_testp4_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[9] = testp4_expected_prev[9];
	end
	if (
		( testp4_expected_prev[10] !== 1'bx ) && ( testp4_prev[10] !== testp4_expected_prev[10] )
		&& ((testp4_expected_prev[10] !== last_testp4_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[10] = testp4_expected_prev[10];
	end
	if (
		( testp4_expected_prev[11] !== 1'bx ) && ( testp4_prev[11] !== testp4_expected_prev[11] )
		&& ((testp4_expected_prev[11] !== last_testp4_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[11] = testp4_expected_prev[11];
	end
	if (
		( testp4_expected_prev[12] !== 1'bx ) && ( testp4_prev[12] !== testp4_expected_prev[12] )
		&& ((testp4_expected_prev[12] !== last_testp4_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[12] = testp4_expected_prev[12];
	end
	if (
		( testp4_expected_prev[13] !== 1'bx ) && ( testp4_prev[13] !== testp4_expected_prev[13] )
		&& ((testp4_expected_prev[13] !== last_testp4_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[13] = testp4_expected_prev[13];
	end
	if (
		( testp4_expected_prev[14] !== 1'bx ) && ( testp4_prev[14] !== testp4_expected_prev[14] )
		&& ((testp4_expected_prev[14] !== last_testp4_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[14] = testp4_expected_prev[14];
	end
	if (
		( testp4_expected_prev[15] !== 1'bx ) && ( testp4_prev[15] !== testp4_expected_prev[15] )
		&& ((testp4_expected_prev[15] !== last_testp4_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[15] = testp4_expected_prev[15];
	end
	if (
		( testp4_expected_prev[16] !== 1'bx ) && ( testp4_prev[16] !== testp4_expected_prev[16] )
		&& ((testp4_expected_prev[16] !== last_testp4_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[16] = testp4_expected_prev[16];
	end
	if (
		( testp4_expected_prev[17] !== 1'bx ) && ( testp4_prev[17] !== testp4_expected_prev[17] )
		&& ((testp4_expected_prev[17] !== last_testp4_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[17] = testp4_expected_prev[17];
	end
	if (
		( testp4_expected_prev[18] !== 1'bx ) && ( testp4_prev[18] !== testp4_expected_prev[18] )
		&& ((testp4_expected_prev[18] !== last_testp4_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[18] = testp4_expected_prev[18];
	end
	if (
		( testp4_expected_prev[19] !== 1'bx ) && ( testp4_prev[19] !== testp4_expected_prev[19] )
		&& ((testp4_expected_prev[19] !== last_testp4_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[19] = testp4_expected_prev[19];
	end
	if (
		( testp4_expected_prev[20] !== 1'bx ) && ( testp4_prev[20] !== testp4_expected_prev[20] )
		&& ((testp4_expected_prev[20] !== last_testp4_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[20] = testp4_expected_prev[20];
	end
	if (
		( testp4_expected_prev[21] !== 1'bx ) && ( testp4_prev[21] !== testp4_expected_prev[21] )
		&& ((testp4_expected_prev[21] !== last_testp4_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[21] = testp4_expected_prev[21];
	end
	if (
		( testp4_expected_prev[22] !== 1'bx ) && ( testp4_prev[22] !== testp4_expected_prev[22] )
		&& ((testp4_expected_prev[22] !== last_testp4_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[22] = testp4_expected_prev[22];
	end
	if (
		( testp4_expected_prev[23] !== 1'bx ) && ( testp4_prev[23] !== testp4_expected_prev[23] )
		&& ((testp4_expected_prev[23] !== last_testp4_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[23] = testp4_expected_prev[23];
	end
	if (
		( testp4_expected_prev[24] !== 1'bx ) && ( testp4_prev[24] !== testp4_expected_prev[24] )
		&& ((testp4_expected_prev[24] !== last_testp4_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[24] = testp4_expected_prev[24];
	end
	if (
		( testp4_expected_prev[25] !== 1'bx ) && ( testp4_prev[25] !== testp4_expected_prev[25] )
		&& ((testp4_expected_prev[25] !== last_testp4_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[25] = testp4_expected_prev[25];
	end
	if (
		( testp4_expected_prev[26] !== 1'bx ) && ( testp4_prev[26] !== testp4_expected_prev[26] )
		&& ((testp4_expected_prev[26] !== last_testp4_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[26] = testp4_expected_prev[26];
	end
	if (
		( testp4_expected_prev[27] !== 1'bx ) && ( testp4_prev[27] !== testp4_expected_prev[27] )
		&& ((testp4_expected_prev[27] !== last_testp4_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[27] = testp4_expected_prev[27];
	end
	if (
		( testp4_expected_prev[28] !== 1'bx ) && ( testp4_prev[28] !== testp4_expected_prev[28] )
		&& ((testp4_expected_prev[28] !== last_testp4_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[28] = testp4_expected_prev[28];
	end
	if (
		( testp4_expected_prev[29] !== 1'bx ) && ( testp4_prev[29] !== testp4_expected_prev[29] )
		&& ((testp4_expected_prev[29] !== last_testp4_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[29] = testp4_expected_prev[29];
	end
	if (
		( testp4_expected_prev[30] !== 1'bx ) && ( testp4_prev[30] !== testp4_expected_prev[30] )
		&& ((testp4_expected_prev[30] !== last_testp4_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[30] = testp4_expected_prev[30];
	end
	if (
		( testp4_expected_prev[31] !== 1'bx ) && ( testp4_prev[31] !== testp4_expected_prev[31] )
		&& ((testp4_expected_prev[31] !== last_testp4_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port testp4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", testp4_expected_prev);
		$display ("     Real value = %b", testp4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_testp4_exp[31] = testp4_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CORDIC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] theta;
// wires                                               
wire [31:0] result;
wire [31:0] testp0;
wire [31:0] testp1;
wire [31:0] testp2;
wire [31:0] testp3;
wire [31:0] testp4;

wire sampler;                             

// assign statements (if any)                          
CORDIC i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.result(result),
	.testp0(testp0),
	.testp1(testp1),
	.testp2(testp2),
	.testp3(testp3),
	.testp4(testp4),
	.theta(theta)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// theta[ 31 ]
initial
begin
	theta[31] = 1'b0;
end 
// theta[ 30 ]
initial
begin
	theta[30] = 1'b1;
	theta[30] = #200000 1'b0;
end 
// theta[ 29 ]
initial
begin
	theta[29] = 1'b0;
end 
// theta[ 28 ]
initial
begin
	theta[28] = 1'b0;
end 
// theta[ 27 ]
initial
begin
	theta[27] = 1'b0;
end 
// theta[ 26 ]
initial
begin
	theta[26] = 1'b0;
	theta[26] = #100000 1'b1;
	theta[26] = #50000 1'b0;
end 
// theta[ 25 ]
initial
begin
	theta[25] = 1'b1;
	theta[25] = #100000 1'b0;
	theta[25] = #50000 1'b1;
	theta[25] = #50000 1'b0;
end 
// theta[ 24 ]
initial
begin
	theta[24] = 1'b1;
	theta[24] = #100000 1'b0;
end 
// theta[ 23 ]
initial
begin
	theta[23] = 1'b1;
	theta[23] = #100000 1'b0;
end 
// theta[ 22 ]
initial
begin
	theta[22] = 1'b0;
	theta[22] = #150000 1'b1;
	theta[22] = #50000 1'b0;
end 
// theta[ 21 ]
initial
begin
	theta[21] = 1'b1;
	theta[21] = #150000 1'b0;
end 
// theta[ 20 ]
initial
begin
	theta[20] = 1'b0;
	theta[20] = #150000 1'b1;
	theta[20] = #50000 1'b0;
end 
// theta[ 19 ]
initial
begin
	theta[19] = 1'b0;
	theta[19] = #150000 1'b1;
	theta[19] = #50000 1'b0;
end 
// theta[ 18 ]
initial
begin
	theta[18] = 1'b0;
end 
// theta[ 17 ]
initial
begin
	theta[17] = 1'b1;
	theta[17] = #200000 1'b0;
end 
// theta[ 16 ]
initial
begin
	theta[16] = 1'b1;
	theta[16] = #150000 1'b0;
end 
// theta[ 15 ]
initial
begin
	theta[15] = 1'b0;
	theta[15] = #100000 1'b1;
	theta[15] = #50000 1'b0;
end 
// theta[ 14 ]
initial
begin
	theta[14] = 1'b0;
	theta[14] = #150000 1'b1;
	theta[14] = #50000 1'b0;
end 
// theta[ 13 ]
initial
begin
	theta[13] = 1'b0;
	theta[13] = #150000 1'b1;
	theta[13] = #50000 1'b0;
end 
// theta[ 12 ]
initial
begin
	theta[12] = 1'b0;
end 
// theta[ 11 ]
initial
begin
	theta[11] = 1'b0;
end 
// theta[ 10 ]
initial
begin
	theta[10] = 1'b0;
	theta[10] = #150000 1'b1;
	theta[10] = #50000 1'b0;
end 
// theta[ 9 ]
initial
begin
	theta[9] = 1'b0;
	theta[9] = #150000 1'b1;
	theta[9] = #50000 1'b0;
end 
// theta[ 8 ]
initial
begin
	theta[8] = 1'b0;
end 
// theta[ 7 ]
initial
begin
	theta[7] = 1'b0;
end 
// theta[ 6 ]
initial
begin
	theta[6] = 1'b0;
	theta[6] = #150000 1'b1;
	theta[6] = #50000 1'b0;
end 
// theta[ 5 ]
initial
begin
	theta[5] = 1'b0;
	theta[5] = #150000 1'b1;
	theta[5] = #50000 1'b0;
end 
// theta[ 4 ]
initial
begin
	theta[4] = 1'b0;
end 
// theta[ 3 ]
initial
begin
	theta[3] = 1'b0;
end 
// theta[ 2 ]
initial
begin
	theta[2] = 1'b0;
	theta[2] = #150000 1'b1;
	theta[2] = #50000 1'b0;
end 
// theta[ 1 ]
initial
begin
	theta[1] = 1'b0;
	theta[1] = #150000 1'b1;
	theta[1] = #50000 1'b0;
end 
// theta[ 0 ]
initial
begin
	theta[0] = 1'b0;
end 

CORDIC_vlg_sample_tst tb_sample (
	.clk(clk),
	.theta(theta),
	.sampler_tx(sampler)
);

CORDIC_vlg_check_tst tb_out(
	.result(result),
	.testp0(testp0),
	.testp1(testp1),
	.testp2(testp2),
	.testp3(testp3),
	.testp4(testp4),
	.sampler_rx(sampler)
);
endmodule

